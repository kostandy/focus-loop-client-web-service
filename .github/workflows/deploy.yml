name: Deploy Application

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      build_path: ${{ steps.build.outputs.build_path }}

    steps:
      # Checkout your code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22" # Use the Node.js version you need

      # Cache node modules
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Build the application
      - name: Build the application
        id: build
        run: |
          npm run generate
          echo "::set-output name=build_path::$(pwd)/dist"

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Deploy using SCP
      - name: Deploy to server
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_PATH: ${{ secrets.SERVER_PATH }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST "rm -rf $SERVER_PATH/public && mkdir -p $SERVER_PATH/public"
          scp -r ${{ needs.build.outputs.build_path }} $SERVER_USER@$SERVER_HOST:$SERVER_PATH
          ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST sh deploy.sh
